<template>
    <view class="wrapper">
        <tabPanel :tabs.sync="tabs"
                  :current.sync="current">
            <view slot="content">
                <view class="panel"
                      wx:if="{{current==='nav'}}">
                    <view>
                        <view class="row">
                            <text class="label text-sd">起始星系：</text>
                            <SolarSystemSelect :value.sync="solarSystemId" />
                        </view>
                        <view class="row">
                            <text class="label text-sd">舰船类型：</text>
                            <ShipTypeSelect :list="shipTypeList"
                                            :needSearch="needSearch"
                                            :value.sync="shipType" />
                        </view>
                        <view class="row">
                            <text class="label text-sd">技能等级：</text>
                            <SkillLevelSelect :list="skillLevelList"
                                              :needSearch="needSearch"
                                              :value.sync="skillLevel" />
                        </view>
                        <view class="row">
                            <text class="label text-sd">跳跃距离：</text>
                            <Input :value.sync="distence" />
                        </view>
                    </view>
                    <button bindtap="getNearbySystem">计算</button>
                    <NavList :list.sync="list"
                             :loading.sync="loading"></NavList>
                </view>

                <view class="panel"
                      wx:if="{{current==='jump'}}">
                    <view>
                        <view class="row">
                            <text class="label text-sd">起始星系：</text>
                            <StartSolarSystem :value.sync="origin" />
                        </view>
                        <view class="row">
                            <text class="label text-sd">目标星系：</text>
                            <EndSolarSystem :value.sync="destination" />
                        </view>
                        <view class="row">
                            <text class="label text-sd">路径规则：</text>
                            <RouteFlag :list="flagList"
                                       :needSearch="needSearch"
                                       :value.sync="flag" />
                        </view>
                    </view>
                    <button bindtap="getJumpInfoHandler">计算</button>
                    <view class="text-sd jump-num">跳跃数：{{jumpNum}}</view>
                    <JumpList :list.sync="jumpList"
                              :loading.sync="jumpLoading"></JumpList>
                </view>
            </view>
        </tabPanel>

        <view class="go-top"
              hidden="{{!showGoTop}}">
            <image src="../../assets/images/ico-to-top.svg"
                   bindtap="goToTop"></image>
        </view>

    </view>

</template>

<script >
import wepy from "wepy";
import { getNearbySystem, getSolarSystemPath } from "service";
import Select from 'components/Select';
import tabPanel from "components/TabPanel";
import SolarSystemSelect from 'components/SolarSystemSelect';
import Input from 'components/Input';
import List from './list';

export default class Index extends wepy.page {
    config = {
        navigationBarTitleText: "EVE"
    };

    components = {
        tabPanel,
        SolarSystemSelect,
        Input,
        ShipTypeSelect: Select,
        SkillLevelSelect: Select,
        RouteFlag: Select,
        NavList: List,
        JumpList: List,
        StartSolarSystem: SolarSystemSelect,
        EndSolarSystem: SolarSystemSelect
    };

    data = {
        tabs: [{ name: 'nav', label: '旗舰导航' }, { name: 'jump', label: '常规导航' }],
        shipTypeList: [
            { label: '超旗/泰坦', value: 0 },
            { label: '小航/后勤航', value: 1 },
            { label: '黑隐特勤舰', value: 2 },
            { label: '跳货/大鲸鱼', value: 3 }
        ],
        skillLevelList: [
            { label: '校对1级', value: 0 },
            { label: '校对2级', value: 1 },
            { label: '校对3级', value: 2 },
            { label: '校对4级', value: 3 },
            { label: '校对5级', value: 4 }
        ],
        distenceMap: [
            [3.6, 4.2, 4.8, 5.4, 6],
            [4.2, 4.9, 5.6, 6.3, 7],
            [4.8, 5.6, 6.4, 7.2, 8],
            [6, 7, 8, 9, 10]
        ],
        current: 'nav',
        needSearch: false,
        list: [],
        shipType: 0,
        skillLevel: 4,
        solarSystemId: '',
        distence: '',
        loading: false,
        showGoTop: false,
        origin: '',
        destination: '',
        flagList: [
            { label: '短程优先', value: 'shortest' },
            { label: '安全优先', value: 'secure' },
            { label: '低安全优先', value: 'insecure' },
        ],
        flag: 'shortest',
        jumpList: [],
        jumpLoading: false
    };

    watch = {
        skillLevel() {
            this.getDistence();
        },
        shipType() {
            this.getDistence();
        },
        origin() {
            this.getJumpInfo();
        },
        destination() {
            this.getJumpInfo();
        },
        flag() {
            this.getJumpInfo();
        }
    }

    computed = {
        jumpNum() {
            const jump = this.jumpList.length - 1;
            return jump > 0 ? jump : 0;
        }
    };

    getDistence() {
        this.distence = this.distenceMap[this.shipType][this.skillLevel];
    }

    async getJumpInfo() {
        this.jumpList = [];
        if (!this.origin || !this.destination) {
            return;
        }
        this.jumpLoading = true;
        this.jumpList = await getSolarSystemPath(this.origin, this.destination, this.flag);
        this.jumpLoading = false;
        this.$apply();

    }

    methods = {
        async getNearbySystem() {
            this.list = [];
            if (!this.distence || !this.solarSystemId) {
                return;
            }
            this.loading = true;
            this.list = await getNearbySystem(this.solarSystemId, this.distence);
            this.loading = false;
            this.$apply();
        },
        getJumpInfoHandler() {
            this.getJumpInfo();
        },
        goToTop() {
            wx.pageScrollTo({ scrollTop: 0, duration: 500 })
        }
    }

    async onLoad() {
        this.getDistence();
    }

    onPageScroll({ scrollTop }) {
        if (scrollTop > 200) {
            if (!this.showGoTop) {
                this.showGoTop = true;
                this.$apply();
            }
        } else if (this.showGoTop) {
            this.showGoTop = false;
            this.$apply();
        }
    }
}

</script>

<style lang="less">
@import "./style.less";
</style>

